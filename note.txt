from gba.utils import r1
an.globals.r1 = r1

from gba.vbacontrol import VbaHelper
an.globals.v = v = VbaHelper()
print(v.attach())


no$gba hack note

NO$GBA.EXE+60D31 - 8B 2D 383B4C00        - mov ebp,[NO$GBA.EXE+C3B38] ; 推测是指针基址


[NO$GBA.EXE+C3B38]+8E74+下面对应的偏移量 == 对应内存区的大小
[NO$GBA.EXE+C3B38]+8E28+下面对应的偏移量 == 对应内存区的指针

0x00000000 0x0
0x02000000 0x8
0x03000000 0xc
0x04000000 0x10
0x05000000 0x14
0x06000000 0x18
0x07000000 0x1c
0x08000000 0x20
0x0e000000 0x38

hex(0x0<<2)
hex(0x2<<2)
hex(0x3<<2)
hex(0x4<<2)
hex(0x5<<2)
hex(0x6<<2)
hex(0x7<<2)
hex(0x8<<2)
hex(0xe<<2)

注: thumb bl 的最大偏移量为+-4M

# 根据bl代码计算偏移量
def bl2offset(code):
	return ((code & 0x07FF)<<12) | (((code >> 16) & 0x07FF)<<1)
print(hex(bl2offset(0xf936f003)))

# 根据偏移量计算bl代码
def offset2bl(offset):
	return ((0xf800 | ((offset >> 1) & 0x07FF)) << 16) | (0xf000 | ((offset >> 12) & 0x07FF))
print(hex(offset2bl(0x326c)))



# 字模排序
from gba.dumper import Dumper

d = Dumper(workdir+'font.bin')
data = d.read(0x0, 0x20000)
d.close()
new = bytearray()

index = [
0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
0x1A, 0x1B, 0x27, 0x28, 0x95, 0x93, 0x95, 0x86,
0xA1, 0xA3, 0x8C, 0xBE, 0x87, 0x96, 0xBF, 0x23,
0x1F, 0x20, 0x21, 0x22, 0x8F, 0x90, 0x2A, 0x2B,
0x2C, 0x2D, 0x92, 0x94, 0x1C, 0x24, 0x8D, 0xC0,
0x8E, 0x91, 0x26, 0x25, 0x97, 0x98, 0x99, 0x9A,
0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA4, 0xA5,
0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD,
0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5,
0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD
]

for x in index:
	start = (x - 1) << 6
	new.extend(data[start:start+64])

with open(workdir+'font2.bin', 'wb') as font2:
	font2.write(new)


# 清除阴影
def clearShadom(data, sh, bg):
	i = len(data)
	bgh = (bg << 4)
	while i >= 0:
		i -= 1
		b = data[i]
		if (b & 0xF) == sh:
			b = b & 0xF0 | bg
		if ((b >> 4) & 0xF) == sh:
			b = b & 0xF | bgh
		data[i] = b


# 字模顺序改变
from gba.dumper import Dumper
d = Dumper(workdir+'font.bin')
newfont = open(workdir+'font5.bin', 'wb')

def clearShadom(data, sh, bg):
	i = len(data)
	bgh = (bg << 4)
	while i >= 0:
		i -= 1
		b = data[i]
		if (b & 0xF) == sh:
			b = b & 0xF0 | bg
		if ((b >> 4) & 0xF) == sh:
			b = b & 0xF | bgh
		data[i] = b

SIZE = 0x20000
buf = bytearray(SIZE)
bgs = (3, 0)

for i in range(0, 2):
	bg = bgs[i]
	bg = bg | (bg << 4)
	for x in range(len(buf)):
		buf[x] = bg

	fontdata = d.read(SIZE * i, SIZE)
	for key, val in an.data2.items():
		ts = (key - 1) << 6
		fs = (an.data[val] - 1) << 6
		buf[ts:ts+64] = fontdata[fs:fs+64]
	for x in range(1, 8):
		end = x * (1 << 14)
		start = end - 64
		buf[start:end] = fontdata[start:end]
	clearShadom(buf, 2, bgs[i])
	newfont.write(buf)

d.close()
newfont.close()


# 16进制计算
from win32.hotkey import HotKeyHelper
from win32.keys import getVK, MOD_ALT, MOD_CONTROL
from gba.utils import hexCalc

def fn(i):
    an.view = an.active_view()
    an.map_selected_text(lambda x: hexCalc(x))

keyId = 'hex_calc'
an.h = h = HotKeyHelper()
h.RegisterHotKey([(keyId, MOD_ALT | MOD_CONTROL, 'h', fn)])